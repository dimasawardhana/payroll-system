// Code generated by MockGen. DO NOT EDIT.
// Source: admin_service dependencies for testing

package mocks

import (
	"context"
	"time"
	"payroll-system/internal/domain"
	"github.com/golang/mock/gomock"
)

type MockPayrollRepository struct {
	ctrl     *gomock.Controller
	Payrolls []domain.Payroll
	Err      error
	PayrollPeriod domain.PayrollPeriod
	Payslip domain.Payroll
}

func NewMockPayrollRepository(ctrl *gomock.Controller) *MockPayrollRepository {
	return &MockPayrollRepository{ctrl: ctrl}
}

func (m *MockPayrollRepository) GetPayrollsByPeriodID(ctx context.Context, periodID int) ([]domain.Payroll, error) {
	return m.Payrolls, m.Err
}

func (m *MockPayrollRepository) BulkInsertPayrolls(ctx context.Context, payrolls []domain.Payroll) error {
	return m.Err
}

func (m *MockPayrollRepository) GetPayrollPeriod(ctx context.Context, period domain.PayrollPeriod) (domain.PayrollPeriod, error) {
	return domain.PayrollPeriod{}, m.Err
}

func (m *MockPayrollRepository) GetPayrollPeriodFromDateRange(ctx context.Context, period domain.PayrollPeriod) (domain.PayrollPeriod, error) {
	return domain.PayrollPeriod{}, m.Err
}

func (m *MockPayrollRepository) CreatePayrollPeriod(ctx context.Context, payroll domain.PayrollPeriod) (string, error) {
	return "", m.Err
}
func (m *MockPayrollRepository) GetPayrollPeriodFromDate(ctx context.Context, date time.Time) (domain.PayrollPeriod, error) {
	return m.PayrollPeriod, m.Err
}
func (m *MockPayrollRepository) GetEmployeePayslipByPeriod(ctx context.Context, payroll domain.Payroll) (domain.Payroll, error) {
	return m.Payslip, m.Err
}
func (m *MockPayrollRepository) LockPayrollPeriod(ctx context.Context, periodID int) error {
	return m.Err
}

type MockEmployeeRepository struct {
	ctrl      *gomock.Controller
	Employees map[int]*domain.Employee
	Err       error
	Employee domain.Employee
}

func NewMockEmployeeRepository(ctrl *gomock.Controller) *MockEmployeeRepository {
	return &MockEmployeeRepository{ctrl: ctrl, Employees: make(map[int]*domain.Employee)}
}

func (m *MockEmployeeRepository) GetEmployeeByID(ctx context.Context, employeeID int) (*domain.Employee, error) {
	e, ok := m.Employees[employeeID]
	if !ok {
		return nil, m.Err
	}
	return e, nil
}

func (m *MockEmployeeRepository) GetAllEmployees(ctx context.Context) ([]domain.Employee, error) {
	return []domain.Employee{}, m.Err
}
func (m *MockEmployeeRepository) GetEmployee(ctx context.Context, credential domain.Employee) (domain.Employee, error) {
	return m.Employee, m.Err
}

type MockAttendanceRepository struct {
	ctrl       *gomock.Controller
	Attendance map[int]int
	Err        error
}

func NewMockAttendanceRepository(ctrl *gomock.Controller) *MockAttendanceRepository {
	return &MockAttendanceRepository{ctrl: ctrl, Attendance: make(map[int]int)}
}

func (m *MockAttendanceRepository) GetTotalAttendanceByDateRangeGroupedByEmployee(ctx context.Context, startDate, endDate time.Time) (map[int]int, error) {
	return m.Attendance, m.Err
}
func (m *MockAttendanceRepository) RecordAttendance(ctx context.Context, attendance domain.Attendance) error {
	return m.Err
}

type MockOvertimeRepository struct {
	ctrl     *gomock.Controller
	Overtime map[int][]domain.Overtime
	Err      error
}

func NewMockOvertimeRepository(ctrl *gomock.Controller) *MockOvertimeRepository {
	return &MockOvertimeRepository{ctrl: ctrl, Overtime: make(map[int][]domain.Overtime)}
}

func (m *MockOvertimeRepository) GetOvertimesGroupedByEmployeeID(ctx context.Context, startDate, endDate time.Time) (map[int][]domain.Overtime, error) {
	return m.Overtime, m.Err
}
func (m *MockOvertimeRepository) SubmitOvertime(ctx context.Context, overtime domain.Overtime) error {
	return m.Err
}

type MockReimbursementRepository struct {
	ctrl           *gomock.Controller
	Reimbursement  map[int][]domain.Reimbursement
	Err            error
}

func NewMockReimbursementRepository(ctrl *gomock.Controller) *MockReimbursementRepository {
	return &MockReimbursementRepository{ctrl: ctrl, Reimbursement: make(map[int][]domain.Reimbursement)}
}

func (m *MockReimbursementRepository) GetReimbursementsGroupedByEmployeeID(ctx context.Context, startDate, endDate time.Time) (map[int][]domain.Reimbursement, error) {
	return m.Reimbursement, m.Err
}
func (m *MockReimbursementRepository) SubmitReimbursement(ctx context.Context, reimbursement domain.Reimbursement) error {
	return m.Err
}

type MockAdminRepository struct {
	ctrl *gomock.Controller
	Admin domain.Admin
	Err error
}

func NewMockAdminRepository(ctrl *gomock.Controller) *MockAdminRepository {
	return &MockAdminRepository{ctrl: ctrl}
}

func (m *MockAdminRepository) GetAdmin(ctx context.Context, credential domain.Admin) (domain.Admin, error) {
	return m.Admin, m.Err
}
